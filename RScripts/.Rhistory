vv <- c(1,4,3,3,5,8,1,0,1)
vv[vv==3]
?resample
??resample
?replicate
?sample
x -< 1:10
x <- 1:10
vv <- sample(x, 1000, replace = TRUE)
vv
vv[vv==3]
length(vv[vv==3])
### Email from Wil Doane on 15 June 2010#
#
# Paul and I have been having a discussion (read: I've been trying to teach#
# him a little something about programming) about finding the number of#
# elements in a vector that match a given value. For example, given#
#  #
#  x <- c(1,2,3,4,1,6,7,8)#
#  #
# we'd like to know the number of 1s that appear in the list.#
#
# I worked thru a few solutions and came up with a version that I'd like to#
# share with you.#
#
# He keeps coming back to a solution that is more intuitive to him, but which#
# I reject, given my training as a computer scientist.#
#
# 1. Would you like to try to come up with a function (countElements) that#
# takes a vector (VV) and a scalar value (ss) and returns the number of times#
# ss appears in VV? So that you have a sense of scale, my solution is 1 line#
# long, his is 2 lines long, not including the function signature line and the#
# closing curly brace. (if not, I can just show you what he and I have come up#
# with)#
#
###### My Solution ########
#
# Here's my proposed solution. The function body is technically one line, and#
# will return the number of elements in vector "vec" that match the specified#
# scalar "scal".#
countElements <- function (vec, scal) { #
  length(vec[vec == scal])#
} # I note that "VV" looks like double-u (W), so I chose different var names#
#
# Here's the function in action#
nsmall <- sample(1:4, size = 20, replace = TRUE)#
countElements(vec = nsmall, scal = 4)#
#
# We can crudely verify that countElements() does what we think it does by#
# comparing it to the summary output when we treat "nsmall" as a vector of#
# factors#
summary(as.factor(nsmall))#
#
# And now we can push R to the limit with a large dataset to see how#
# countElements() stacks up.#
nlarge <- sample(1:4, size = 20000, replace = TRUE)#
countElements(vec = nlarge, scal = 4)#
#
# We can test countElements() output for nlarge in the same way#
summary(as.factor(nlarge))#
#
###### My comments #######
#
# My first concern is that my friend L--a web designer and programmer--doesn't#
# like heavily nested functions. I tend to agree. countElements() fits in one#
# line, sure, but at the cost of nesting discrete operations (viz. selection,#
# then length).#
#
# My second concern is the lack of robust testing I performed on the function.#
# I simply haven't tested vec for anything other than the positive integers#
# 1:4. So, I don't know yet how countElements() will handle negative integers,#
# decimals, fractions, and non-numeric or mixed data-type vectors as vec.#
# countElements() also probably can't handle lists, but that wasn't in the#
# initial spec :-P Finally, countElements() will almost certainly fail if the#
# user passes anything other than a positive integer as the "scal" parameter.
nlarge
dd <- data.frame(x = nsmall, y = (nsmall + 1))
dd
countElements(dd)
countElements(dd, 4)
countElements(nsmall, 4)
countElements((nsmall + 1), 4)
countElements(as.matrix(dd), 4)
countElements(as.list(dd), 4)
countElements(as.list(as.numeric(dd)), 4)
 # Paul's#
 ValuePerVariable <- function(XX, v) {#
  D <- ((XX) == v)#
  colSums(D)#
 }
ValuePerVariable(dd, 4)
z <- c(4, 6, 2, 3, 2, 3, 3, 4, 8)
z
ValuePerVariable(z, 4)
z <- c(4, 6, 2, 3, 2, 3, 3, 4, 8)
?rep
dd <- cbind(z, rep.int(0, times = length(z)))
dd
ValuePerVariable(dd, 4)
dd <- cbind(nsmall, rep.int(0, times = length(nsmall)))
dd
ValuePerVariable(dd, 4)
x <- c(,,3,5,)
x <- read.csv("~/Desktop/csvtest.csv")
x <- read.csv(file = "~/Desktop/csvtest.csv")
x <- read.table(file = "~/Desktop/csvtest.csv")
x <- read.csv(file = "~/Desktop/csvtest.csv", header = F)
x
summary(x)
x <- as.factor(x)
x
x <- as.data.frame(x)
x
x$V2 <- as.factor(x$V2)
x
summary(x)
??na
?is.na
as.na
??as.na
.code.to.na
code.to.na
library(norm)
df <- data.frame(a = LETTERS[sample(5, 15, replace=TRUE)], y = rnorm(15))  #
combine_factor(df$a, c(1,2,2,1,2))#
combine_factor(df$a, c(1:4, 1))#
(f <- reorder(df$a, df$y))#
percent <- tapply(abs(df$y), df$a, sum)#
combine_factor(f, c(order(percent)[1:3]))
library(reshape)
df <- data.frame(a = LETTERS[sample(5, 15, replace=TRUE)], y = rnorm(15))  #
combine_factor(df$a, c(1,2,2,1,2))#
combine_factor(df$a, c(1:4, 1))#
(f <- reorder(df$a, df$y))#
percent <- tapply(abs(df$y), df$a, sum)#
combine_factor(f, c(order(percent)[1:3]))
df
summary(df)
x <- dataframe(student = c(1:10), value = c(a, a, b, a, c, d, e, f, g, h))
x <- data.frame(student = c(1:10), value = c(a, a, b, a, c, d, e, f, g, h))
a:h
"a":"h"
x <- data.frame(student = c(1:10), value = c(sample(22:33, size = 1, replace = TRUE)))
x
x <- data.frame(student = c(1:10), value = c(sample(22:33, size = 10, replace = TRUE)))
x
x[value == 3]
attach(x)
value == 3
value == 24
x[value == 24 OR value == 32]
x[value == 24, value == 32]
?subset
x[student == 2 & value == 32]
x[student == 2 && value == 32]
x[student == 2]
x[student == 2 && value == 32, ]
x[student == 2 & value == 32, ]
x[student == 2 & value == 31, ]
x[student == 2 | value == 31, ]
x[student == 2 | value == 32, ]
x[student == 2 | value == 32 | value == 24, ]
?order
?sort
x <- c(sample(1:10, size = 10))
x
x <- c(sample(11:20, size = 10))
x
sort(x)
order(x)
setwd("~/Dropbox/Research/UseR2010/UseR2010Data/")
ls
source(DataReshape.r)
source("RScripts/DataReshape.r")
setwd("~/Dropbox/Research/UseR2010/UseR2010Data/RScripts/")
source("RScripts/DataReshape.r")
source("DataReshape.r")
x <- totalCountsPerReasoningType
x
x <- totalCountsPerReasoningType(phys161dataMelt)
x
str(x)
x <- unlist(x)
str(x)
x
x <- totalCountsPerReasoningType(phys161dataMelt)
sort(x)
x
x <- totalCountsPerReasoningType(phys161dataMelt)
x
source("DataReshape.r")
x <- totalCountsPerReasoningType(phys161dataMelt)
x
order(x)
length(x)
x[order(x)]
rownames(x)
colnames(x)
t(x)
sort(t(x))
x
x <- t(x)
x
str(x)
sort(x)
order(x)
x[1]
x[4]
x["a"]
?typeof
typeof(x)
x <- as.integer(x)
x
totalCountsPerReasoningType(phys161data)
totalCountsPerReasoningType(phys161dataMelt)
totalCountsPerReasoningType(phys161dataMelt) -> x
x
totalCountsPerReasoningType
source("DataReshape.r")
totalCountsPerReasoningType(phys161dataMelt) -> x
x
totalCountsPerReasoningType
library(ggplot2)
qplot
x
x <- rnorm(10)
x
order(x)
sort(x)
?order
?sort
?which
?paste
x <- 4
paste(x)
x
x <- data.frame(value = c(3,1,1), hammer = c(4,3,3))
x
x$hammer
hammer
y <- hammer
y <- "hammer"
y
x$y
function (x, y) {print(x); print(y)} -> testfunc
testfunc
function (y) {print(y)} -> testfunc
testfunc <- function (y) {print(y)}
testfunc
testfunc (hammer)
?paste
x <- "hammer"
paste(x)
paste(x, sep = "")
x
y <- data.frame(value = c(3,1,1), hammer = c(4,3,3))
y
y$hammer
y$"hammer"
